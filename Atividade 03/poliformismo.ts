// Classe base Message
abstract class Message {
  content: string;

  constructor(content: string) {
    this.content = content;
  }

  // MÃ©todo abstrato que deve ser implementado pelas subclasses
  abstract send(): void;
}

// Subclasse para mensagens de texto
class TextMessage extends Message {
  send(): void {
    console.log(`ğŸ“© Enviando mensagem de texto: ${this.content}`);
  }
}

// Subclasse para mensagens de notificaÃ§Ã£o
class NotificationMessage extends Message {
  send(): void {
    console.log(`ğŸ”” Enviando notificaÃ§Ã£o: ${this.content}`);
  }
}

/* Teste
const msg1: Message = new TextMessage("OlÃ¡! Tudo bem?");
const msg2: Message = new NotificationMessage("VocÃª tem uma nova atualizaÃ§Ã£o!");

msg1.send();
msg2.send();*/

// Teste do sistema
const msg1: Message = new TextMessage("Bom dia!");
const msg2: Message = new NotificationMessage("Sua encomenda chegou.");

// Chamando o mesmo mÃ©todo (polimorfismo em aÃ§Ã£o)
msg1.send(); // Enviando mensagem de texto: "Bom dia!"
msg2.send(); // Enviando notificaÃ§Ã£o: "Sua encomenda chegou."
